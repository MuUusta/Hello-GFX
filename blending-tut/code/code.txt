#include <GL/glut.h> 
#include <GL/gl.h>
#include <GL/glu.h> 

void timer(int)
{
  glutPostRedisplay();
  glutTimerFunc(1000/60, timer, 0);
}


void init(GLsizei Width, GLsizei Height)
{

    glClearColor(0.0f, 0.0f, 0.0f, 0.0f);
    glEnable(GL_DEPTH_TEST);
   
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();               // Reset The Projection Matrix
    
    gluPerspective(45.0f,(GLfloat)Width/(GLfloat)Height,0.1f,100.0f);
    glMatrixMode(GL_MODELVIEW);
    
    // set blending func
    glBlendFunc(GL_SRC_ALPHA,GL_ONE);           // Set The Blending Function 
    glColor4f(1.0f, 1.0f, 1.0f, 0.3);    
}


void reshape(GLsizei Width, GLsizei Height)
{
    if (Height==0)              // Prevent A Divide By Zero If The Window Is Too Small
    Height=1;

    glViewport(0, 0, Width, Height);        

    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();

    gluPerspective(45.0f,(GLfloat)Width/(GLfloat)Height,0.1f,100.0f);
    glMatrixMode(GL_MODELVIEW);
}

void renderQuad(){

  glBegin(GL_QUADS);
  glNormal3f( 0.0f, 0.0f, 1.0f);                              // front face points out of the screen on z.
  glTexCoord2f(0.0f, 0.0f); glVertex3f(-1.0f, -1.0f,  0.0f);  // Bottom Left Of The Texture and Quad
  glTexCoord2f(1.0f, 0.0f); glVertex3f( 1.0f, -1.0f,  0.0f);  // Bottom Right Of The Texture and Quad
  glTexCoord2f(1.0f, 1.0f); glVertex3f( 1.0f,  1.0f,  0.0f);  // Top Right Of The Texture and Quad
  glTexCoord2f(0.0f, 1.0f); glVertex3f(-1.0f,  1.0f,  0.0f);  // Top Left Of The Texture and Quad
  glEnd();
  
}

void display(GLvoid)
{
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);     // Clear The Screen And The Depth Buffer
    glLoadIdentity();               // Reset The View

    
    glColor3f(.9f, 0.3f, 0.3f);
    glDisable(GL_BLEND);                    // Turn Blending On

    glTranslatef(0,0,-8);
    glRotatef(glutGet(GLUT_ELAPSED_TIME)*0.02,0,1,0);

    glPushMatrix();
    renderQuad();
    glPopMatrix();

    glEnable(GL_BLEND);
    glBlendFunc(GL_SRC_ALPHA,GL_ONE);   // Blending Function For Translucency Based On Source Alpha Value
    glColor4f(.5f, 0.5f, 0.5f,0.3);        // Full Brightness, 50% Alpha ( NEW )


    glPushMatrix();
    glTranslatef(0,0,-1);
    renderQuad();
    glPopMatrix();

    glDisable(GL_BLEND);                    // Turn Blending On

    glutSwapBuffers();
}


int main(int argc, char **argv) 
{  
    glutInit(&argc, argv);  
    glutInitDisplayMode(GLUT_RGBA | GLUT_DOUBLE | GLUT_DEPTH | GLUT_ALPHA);  
    glutInitWindowSize(700, 500);  
    glutInitWindowPosition(0, 0);  
    glutCreateWindow("Blending");  

    //Register callback functions
    glutDisplayFunc(display);  
    glutReshapeFunc(reshape);

    // Initialize window
    init(700, 500);
    timer(0);
  
    glutMainLoop();  

    return 1;
}



