#include <GL/glut.h> 
#include <GL/gl.h>
#include <GL/glu.h> 
#include <math.h>

void timer(int)
{
  glutPostRedisplay();
  glutTimerFunc(1000/60, timer, 0);
}


void init(GLsizei Width, GLsizei Height)
{

    glClearColor(0.6, 0.6, 0.6, 1.0);
    glEnable(GL_DEPTH_TEST);
   
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();               // Reset The Projection Matrix
    
    gluPerspective(45.0f,(GLfloat)Width/(GLfloat)Height,0.1f,100.0f);
    glMatrixMode(GL_MODELVIEW);

    
    glFogi(GL_FOG_MODE, GL_LINEAR);
    glFogf(GL_FOG_START, 0.0);
    glFogf(GL_FOG_END, 9.0);
    float color[] = {0.6, 0.6, 0.6, 1.0};
    glFogfv(GL_FOG_COLOR, color);
    glEnable(GL_FOG);

    

}


void reshape(GLsizei Width, GLsizei Height)
{
    if (Height==0)              // Prevent A Divide By Zero If The Window Is Too Small
    Height=1;

    glViewport(0, 0, Width, Height);        

    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();

    gluPerspective(45.0f,(GLfloat)Width/(GLfloat)Height,0.1f,100.0f);
    glMatrixMode(GL_MODELVIEW);
}

void display(GLvoid)
{
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);     // Clear The Screen And The Depth Buffer
    glLoadIdentity();               // Reset The View



    glTranslatef(0,0,-7-sin(glutGet(GLUT_ELAPSED_TIME)*0.0004)*3);
    glRotatef(glutGet(GLUT_ELAPSED_TIME)*0.02,0,1,0);

    glColor3f(0.6, 0.3, 0.0);
    glutSolidTeapot(1);

    glutSwapBuffers();
}


int main(int argc, char **argv) 
{  
    glutInit(&argc, argv);  
    glutInitDisplayMode(GLUT_RGBA | GLUT_DOUBLE | GLUT_DEPTH | GLUT_ALPHA);  
    glutInitWindowSize(700, 500);  
    glutInitWindowPosition(0, 0);  
    glutCreateWindow("Fog");  

    //Register callback functions
    glutDisplayFunc(display);  
    glutReshapeFunc(reshape);

    // Initialize window
    init(700, 500);
    timer(0);
  
    glutMainLoop();  

    return 1;
}



